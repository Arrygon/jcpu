%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Thu Sep 21 15:16:39 2017
%%Title: /home/james/instruction_register.sch
%%Author: (null)
%%BoundingBox: 0 0 595 841
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7809 530 translate 90 rotate
1.450552 1.450552 scale
-56400 -50398 translate
59700 52100 59700 51900 10 line
59700 51900 63400 51900 10 line
60000 52100 60000 51700 10 line
60000 51700 63400 51700 10 line
60300 52100 60300 51500 10 line
60300 51500 63400 51500 10 line
60600 52100 60600 51300 10 line
60600 51300 63400 51300 10 line
60900 52100 60900 51100 10 line
60900 51100 63400 51100 10 line
61200 52100 61200 50900 10 line
61200 50900 63400 50900 10 line
61500 52100 61500 50700 10 line
61500 50700 63400 50700 10 line
61800 52100 61800 50500 10 line
61800 50500 63400 50500 10 line
61800 54100 61800 55100 10 line
58700 54200 61800 54200 10 line
61500 54100 61500 55100 10 line
58400 54300 61500 54300 10 line
61200 54100 61200 55100 10 line
58100 54400 61200 54400 10 line
60900 54100 60900 55100 10 line
57800 54500 60900 54500 10 line
60600 54100 60600 55100 10 line
57500 54600 60600 54600 10 line
60300 54100 60300 55100 10 line
57200 54700 60300 54700 10 line
60000 54100 60000 55100 10 line
56900 54800 60000 54800 10 line
59700 54100 59700 55100 10 line
56600 54900 59700 54900 10 line
gsave
58700 53700 58700 53500 10 line
gsave
false true false false 161.777776 [(1) ] 270 58750 53550 144.444443 text
grestore
58700 52800 58700 53000 10 line
gsave
false false false false 161.777776 [(2) ] 270 58750 52950 144.444443 text
grestore
58800 53300 58700 53200 10 line
58700 53200 58600 53300 10 line
58800 53300 58600 53300 10 line
58800 53200 58600 53200 10 line
58700 53200 58700 53000 10 line
58700 53300 58700 53500 10 line
58700 53250 200 0 360 10 darc
59003 53184 59104 53083 10 line
59104 53083 59055 53079 10 line
59055 53079 59157 52978 10 line
58918 53216 59018 53115 10 line
59018 53115 58969 53111 10 line
58969 53111 59070 53010 10 line
grestore
gsave
58400 53700 58400 53500 10 line
gsave
false true false false 161.777776 [(1) ] 270 58450 53550 144.444443 text
grestore
58400 52800 58400 53000 10 line
gsave
false false false false 161.777776 [(2) ] 270 58450 52950 144.444443 text
grestore
58500 53300 58400 53200 10 line
58400 53200 58300 53300 10 line
58500 53300 58300 53300 10 line
58500 53200 58300 53200 10 line
58400 53200 58400 53000 10 line
58400 53300 58400 53500 10 line
58400 53250 200 0 360 10 darc
58703 53184 58804 53083 10 line
58804 53083 58755 53079 10 line
58755 53079 58857 52978 10 line
58618 53216 58718 53115 10 line
58718 53115 58669 53111 10 line
58669 53111 58770 53010 10 line
newpath
58400 52800
25
0 360 arc
fill
newpath
58400 52800
25
0 360 arc
fill
grestore
gsave
58100 53700 58100 53500 10 line
gsave
false true false false 161.777776 [(1) ] 270 58150 53550 144.444443 text
grestore
58100 52800 58100 53000 10 line
gsave
false false false false 161.777776 [(2) ] 270 58150 52950 144.444443 text
grestore
58200 53300 58100 53200 10 line
58100 53200 58000 53300 10 line
58200 53300 58000 53300 10 line
58200 53200 58000 53200 10 line
58100 53200 58100 53000 10 line
58100 53300 58100 53500 10 line
58100 53250 200 0 360 10 darc
58403 53184 58504 53083 10 line
58504 53083 58455 53079 10 line
58455 53079 58557 52978 10 line
58318 53216 58418 53115 10 line
58418 53115 58369 53111 10 line
58369 53111 58470 53010 10 line
newpath
58100 52800
25
0 360 arc
fill
newpath
58100 52800
25
0 360 arc
fill
grestore
gsave
57800 53700 57800 53500 10 line
gsave
false true false false 161.777776 [(1) ] 270 57850 53550 144.444443 text
grestore
57800 52800 57800 53000 10 line
gsave
false false false false 161.777776 [(2) ] 270 57850 52950 144.444443 text
grestore
57900 53300 57800 53200 10 line
57800 53200 57700 53300 10 line
57900 53300 57700 53300 10 line
57900 53200 57700 53200 10 line
57800 53200 57800 53000 10 line
57800 53300 57800 53500 10 line
57800 53250 200 0 360 10 darc
58103 53184 58204 53083 10 line
58204 53083 58155 53079 10 line
58155 53079 58257 52978 10 line
58018 53216 58118 53115 10 line
58118 53115 58069 53111 10 line
58069 53111 58170 53010 10 line
newpath
57800 52800
25
0 360 arc
fill
newpath
57800 52800
25
0 360 arc
fill
grestore
gsave
57500 53700 57500 53500 10 line
gsave
false true false false 161.777776 [(1) ] 270 57550 53550 144.444443 text
grestore
57500 52800 57500 53000 10 line
gsave
false false false false 161.777776 [(2) ] 270 57550 52950 144.444443 text
grestore
57600 53300 57500 53200 10 line
57500 53200 57400 53300 10 line
57600 53300 57400 53300 10 line
57600 53200 57400 53200 10 line
57500 53200 57500 53000 10 line
57500 53300 57500 53500 10 line
57500 53250 200 0 360 10 darc
57803 53184 57904 53083 10 line
57904 53083 57855 53079 10 line
57855 53079 57957 52978 10 line
57718 53216 57818 53115 10 line
57818 53115 57769 53111 10 line
57769 53111 57870 53010 10 line
newpath
57500 52800
25
0 360 arc
fill
newpath
57500 52800
25
0 360 arc
fill
grestore
gsave
57200 53700 57200 53500 10 line
gsave
false true false false 161.777776 [(1) ] 270 57250 53550 144.444443 text
grestore
57200 52800 57200 53000 10 line
gsave
false false false false 161.777776 [(2) ] 270 57250 52950 144.444443 text
grestore
57300 53300 57200 53200 10 line
57200 53200 57100 53300 10 line
57300 53300 57100 53300 10 line
57300 53200 57100 53200 10 line
57200 53200 57200 53000 10 line
57200 53300 57200 53500 10 line
57200 53250 200 0 360 10 darc
57503 53184 57604 53083 10 line
57604 53083 57555 53079 10 line
57555 53079 57657 52978 10 line
57418 53216 57518 53115 10 line
57518 53115 57469 53111 10 line
57469 53111 57570 53010 10 line
newpath
57200 52800
25
0 360 arc
fill
newpath
57200 52800
25
0 360 arc
fill
grestore
gsave
56900 53700 56900 53500 10 line
gsave
false true false false 161.777776 [(1) ] 270 56950 53550 144.444443 text
grestore
56900 52800 56900 53000 10 line
gsave
false false false false 161.777776 [(2) ] 270 56950 52950 144.444443 text
grestore
57000 53300 56900 53200 10 line
56900 53200 56800 53300 10 line
57000 53300 56800 53300 10 line
57000 53200 56800 53200 10 line
56900 53200 56900 53000 10 line
56900 53300 56900 53500 10 line
56900 53250 200 0 360 10 darc
57203 53184 57304 53083 10 line
57304 53083 57255 53079 10 line
57255 53079 57357 52978 10 line
57118 53216 57218 53115 10 line
57218 53115 57169 53111 10 line
57169 53111 57270 53010 10 line
newpath
56900 52800
25
0 360 arc
fill
newpath
56900 52800
25
0 360 arc
fill
grestore
gsave
56600 53700 56600 53500 10 line
gsave
false true false false 161.777776 [(1) ] 270 56650 53550 144.444443 text
grestore
56600 52800 56600 53000 10 line
gsave
false false false false 161.777776 [(2) ] 270 56650 52950 144.444443 text
grestore
56700 53300 56600 53200 10 line
56600 53200 56500 53300 10 line
56700 53300 56500 53300 10 line
56700 53200 56500 53200 10 line
56600 53200 56600 53000 10 line
56600 53300 56600 53500 10 line
56600 53250 200 0 360 10 darc
56903 53184 57004 53083 10 line
57004 53083 56955 53079 10 line
56955 53079 57057 52978 10 line
56818 53216 56918 53115 10 line
56918 53115 56869 53111 10 line
56869 53111 56970 53010 10 line
grestore
58700 54200 58700 53700 10 line
58400 54300 58400 53700 10 line
58100 54400 58100 53700 10 line
57800 54500 57800 53700 10 line
57500 54600 57500 53700 10 line
57200 54700 57200 53700 10 line
56900 54800 56900 53700 10 line
56600 54900 56600 53700 10 line
56600 52800 58700 52800 10 line
gsave
57400 52500 57600 52400 10 line
57600 52400 57400 52300 10 line
57400 52300 57600 52200 10 line
57600 52200 57400 52100 10 line
57400 52500 57600 52600 10 line
57600 52600 57500 52650 10 line
57500 52800 57500 52650 10 line
57500 51900 57500 52052 10 line
57400 52101 57500 52050 10 line
newpath
57500 52800
25
0 360 arc
fill
newpath
57500 52800
25
0 360 arc
fill
grestore
gsave
57450 51600 57550 51600 10 line
57400 51650 57600 51650 10 line
57350 51700 57650 51700 10 line
57500 51900 57500 51700 10 line
grestore
gsave
false false false false 202.222224 [(I7) ] 0 59600 55200 180.555557 text
grestore
gsave
false false false false 202.222224 [(I6) ] 0 59900 55200 180.555557 text
grestore
gsave
false false false false 202.222224 [(I5) ] 0 60200 55200 180.555557 text
grestore
gsave
false false false false 202.222224 [(I4) ] 0 60500 55200 180.555557 text
grestore
gsave
false false false false 202.222224 [(I3) ] 0 60800 55200 180.555557 text
grestore
gsave
false false false false 202.222224 [(I2) ] 0 61100 55200 180.555557 text
grestore
gsave
false false false false 202.222224 [(I1) ] 0 61400 55200 180.555557 text
grestore
gsave
false false false false 202.222224 [(I0) ] 0 61700 55200 180.555557 text
grestore
62400 52100 62700 52100 10 line
62700 52100 62700 55200 10 line
63000 52000 63000 55200 10 line
62100 52000 63000 52000 10 line
gsave
false false false false 202.222224 [(\\_IRW\\_) ] 0 62900 55300 180.555557 text
grestore
gsave
false false false false 202.222224 [(CLK) ] 0 62500 55300 180.555557 text
grestore
gsave
false false false false 202.222224 [(D7) ] 0 63500 51800 180.555557 text
grestore
gsave
false false false false 202.222224 [(D6) ] 0 63500 51600 180.555557 text
grestore
gsave
false false false false 202.222224 [(D5) ] 0 63500 51400 180.555557 text
grestore
gsave
false false false false 202.222224 [(D4) ] 0 63500 51200 180.555557 text
grestore
gsave
false false false false 202.222224 [(D3) ] 0 63500 51000 180.555557 text
grestore
gsave
false false false false 202.222224 [(D2) ] 0 63500 50800 180.555557 text
grestore
gsave
false false false false 202.222224 [(D1) ] 0 63500 50600 180.555557 text
grestore
gsave
false false false false 202.222224 [(D0) ] 0 63500 50400 180.555557 text
grestore
gsave
62100 52100 62100 52300 10 line
59700 52100 59700 52400 10 line
60000 52100 60000 52400 10 line
60300 52100 60300 52400 10 line
60600 52100 60600 52400 10 line
60900 52100 60900 52400 10 line
61200 52100 61200 52400 10 line
61500 52100 61500 52400 10 line
61800 52100 61800 52400 10 line
59700 53800 59700 54100 10 line
60000 53800 60000 54100 10 line
60300 53800 60300 54100 10 line
60600 53800 60600 54100 10 line
60900 53800 60900 54100 10 line
61200 53800 61200 54100 10 line
61500 53800 61500 54100 10 line
61800 53800 61800 54100 10 line
59400 52400 62600 52400 10 line
62600 52400 62600 53800 10 line
62600 53800 59400 53800 10 line
59400 53800 59400 52400 10 line
62100 52350 50 0 360 10 darc
62400 52100 62400 52400 10 line
62400 52475 62350 52400 10 line
62400 52475 62450 52400 10 line
gsave
false true false false 161.777776 [(1) ] 90 62050 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(\\_E\\_) ] 90 62100 52450 144.444443 text
grestore
gsave
false true false false 161.777776 [(3) ] 90 59650 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(1D) ] 90 59700 52450 144.444443 text
grestore
gsave
false true false false 161.777776 [(4) ] 90 59950 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(2D) ] 90 60000 52450 144.444443 text
grestore
gsave
false true false false 161.777776 [(7) ] 90 60250 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(3D) ] 90 60300 52450 144.444443 text
grestore
gsave
false true false false 161.777776 [(8) ] 90 60550 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(4D) ] 90 60600 52450 144.444443 text
grestore
gsave
false true false false 161.777776 [(13) ] 90 60850 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(5D) ] 90 60900 52450 144.444443 text
grestore
gsave
false true false false 161.777776 [(14) ] 90 61150 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(6D) ] 90 61200 52450 144.444443 text
grestore
gsave
false true false false 161.777776 [(17) ] 90 61450 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(7D) ] 90 61500 52450 144.444443 text
grestore
gsave
false true false false 161.777776 [(18) ] 90 61750 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(8D) ] 90 61800 52450 144.444443 text
grestore
gsave
false false false false 161.777776 [(2) ] 90 59650 53900 144.444443 text
grestore
gsave
false true false false 161.777776 [(1Q) ] 90 59700 53750 144.444443 text
grestore
gsave
false false false false 161.777776 [(5) ] 90 59950 53900 144.444443 text
grestore
gsave
false true false false 161.777776 [(2Q) ] 90 60000 53750 144.444443 text
grestore
gsave
false false false false 161.777776 [(6) ] 90 60250 53900 144.444443 text
grestore
gsave
false true false false 161.777776 [(3Q) ] 90 60300 53750 144.444443 text
grestore
gsave
false false false false 161.777776 [(9) ] 90 60550 53900 144.444443 text
grestore
gsave
false true false false 161.777776 [(4Q) ] 90 60600 53750 144.444443 text
grestore
gsave
false false false false 161.777776 [(12) ] 90 60850 53900 144.444443 text
grestore
gsave
false true false false 161.777776 [(5Q) ] 90 60900 53750 144.444443 text
grestore
gsave
false false false false 161.777776 [(15) ] 90 61150 53900 144.444443 text
grestore
gsave
false true false false 161.777776 [(6Q) ] 90 61200 53750 144.444443 text
grestore
gsave
false false false false 161.777776 [(16) ] 90 61450 53900 144.444443 text
grestore
gsave
false true false false 161.777776 [(7Q) ] 90 61500 53750 144.444443 text
grestore
gsave
false false false false 161.777776 [(19) ] 90 61750 53900 144.444443 text
grestore
gsave
false true false false 161.777776 [(8Q) ] 90 61800 53750 144.444443 text
grestore
gsave
false true false false 161.777776 [(11) ] 90 62350 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(CLK) ] 90 62400 52475 144.444443 text
grestore
gsave
false false false false 202.222224 [(74377) ] 90 59360 52400 180.555557 text
grestore
grestore
gsave
false true false false 202.222224 [(U?) ] 90 59300 53800 180.555557 text
grestore
62100 52100 62100 52000 10 line
60 60 63370 51870 fbox
60 60 63370 51670 fbox
60 60 63370 51470 fbox
60 60 63370 51270 fbox
60 60 63370 51070 fbox
60 60 63370 50870 fbox
60 60 63370 50670 fbox
60 60 63370 50470 fbox
gsave
[ 0.00 -1.00 1.00 0.00 61800 55100 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
61800 54200
25
0 360 arc
fill
newpath
61800 54200
25
0 360 arc
fill
newpath
61800 54200
25
0 360 arc
fill
gsave
[ 0.00 -1.00 1.00 0.00 61500 55100 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
61500 54300
25
0 360 arc
fill
newpath
61500 54300
25
0 360 arc
fill
newpath
61500 54300
25
0 360 arc
fill
gsave
[ 0.00 -1.00 1.00 0.00 61200 55100 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
61200 54400
25
0 360 arc
fill
newpath
61200 54400
25
0 360 arc
fill
newpath
61200 54400
25
0 360 arc
fill
gsave
[ 0.00 -1.00 1.00 0.00 60900 55100 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
60900 54500
25
0 360 arc
fill
newpath
60900 54500
25
0 360 arc
fill
newpath
60900 54500
25
0 360 arc
fill
gsave
[ 0.00 -1.00 1.00 0.00 60600 55100 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
60600 54600
25
0 360 arc
fill
newpath
60600 54600
25
0 360 arc
fill
newpath
60600 54600
25
0 360 arc
fill
gsave
[ 0.00 -1.00 1.00 0.00 60300 55100 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
60300 54700
25
0 360 arc
fill
newpath
60300 54700
25
0 360 arc
fill
newpath
60300 54700
25
0 360 arc
fill
gsave
[ 0.00 -1.00 1.00 0.00 60000 55100 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
60000 54800
25
0 360 arc
fill
newpath
60000 54800
25
0 360 arc
fill
newpath
60000 54800
25
0 360 arc
fill
gsave
[ 0.00 -1.00 1.00 0.00 59700 55100 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
59700 54900
25
0 360 arc
fill
newpath
59700 54900
25
0 360 arc
fill
newpath
59700 54900
25
0 360 arc
fill
newpath
58400 52800
25
0 360 arc
fill
newpath
58400 52800
25
0 360 arc
fill
newpath
58100 52800
25
0 360 arc
fill
newpath
58100 52800
25
0 360 arc
fill
newpath
57800 52800
25
0 360 arc
fill
newpath
57800 52800
25
0 360 arc
fill
newpath
57500 52800
25
0 360 arc
fill
newpath
57500 52800
25
0 360 arc
fill
newpath
57200 52800
25
0 360 arc
fill
newpath
57200 52800
25
0 360 arc
fill
newpath
56900 52800
25
0 360 arc
fill
newpath
56900 52800
25
0 360 arc
fill
newpath
58400 52800
25
0 360 arc
fill
newpath
58100 52800
25
0 360 arc
fill
newpath
57800 52800
25
0 360 arc
fill
newpath
57500 52800
25
0 360 arc
fill
newpath
57200 52800
25
0 360 arc
fill
newpath
56900 52800
25
0 360 arc
fill
newpath
57500 52800
25
0 360 arc
fill
newpath
57500 52800
25
0 360 arc
fill
newpath
57500 52800
25
0 360 arc
fill
60 60 62670 55170 fbox
60 60 62970 55170 fbox
showpage
%%End
